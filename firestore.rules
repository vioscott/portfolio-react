rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // DEVELOPMENT RULES (Use for testing - allows all read/write)
    // Uncomment the lines below for quick development setup
    // match /{document=**} {
    //   allow read, write: if true;
    // }
    
    // PRODUCTION RULES (More secure - recommended for live sites)
    // Testimonials collection rules
    match /testimonials/{document} {
      // Anyone can read testimonials
      allow read: if true;
      
      // Allow writes with data validation
      allow write: if request.resource.data.keys().hasAll(['name', 'role', 'text', 'stars']) &&
        request.resource.data.name is string &&
        request.resource.data.role is string &&
        request.resource.data.text is string &&
        request.resource.data.stars is number &&
        request.resource.data.stars >= 1 &&
        request.resource.data.stars <= 5 &&
        request.resource.data.name.size() > 0 &&
        request.resource.data.name.size() <= 100 &&
        request.resource.data.role.size() > 0 &&
        request.resource.data.role.size() <= 100 &&
        request.resource.data.text.size() > 0 &&
        request.resource.data.text.size() <= 1000;
    }
    
    // Deny all other collections by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

/*
INSTRUCTIONS:
1. Copy the rules you want to use from above
2. Go to Firebase Console > Firestore Database > Rules
3. Paste the rules and click "Publish"

FOR DEVELOPMENT:
- Use the simple "allow read, write: if true;" rule
- This allows all operations without restrictions

FOR PRODUCTION:
- Use the testimonials-specific rules
- This validates data and prevents abuse
- Only allows properly formatted testimonials

SECURITY NOTES:
- The development rules are NOT secure for production
- Always validate and sanitize data on the client side too
- Consider adding rate limiting for production use
- Monitor your Firestore usage to prevent abuse
*/
